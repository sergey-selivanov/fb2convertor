/*
    To make release and increase version:
        gradlew -Preckon.stage=final -Preckon.scope=patch reckonTagPush
        gradlew -Preckon.stage=final -Preckon.scope=minor reckonTagPush
        gradlew -Preckon.stage=final -Preckon.scope=major reckonTagPush

*/

plugins {
    id 'application'
    id 'eclipse'

    //id 'org.beryx.jlink' version '2.17.7' // modular
    //id 'org.beryx.runtime' version '1.8.4'  // non modular

    id 'com.github.spotbugs' version '4.6.0'
    id 'checkstyle'
    id 'pmd'

    id 'net.saliman.properties' version '1.5.1'
    id 'com.github.ben-manes.versions' version '0.36.0'
    id 'org.ajoberstar.reckon' version '0.13.0'
    id 'org.ajoberstar.grgit' version '4.1.0'
}

repositories {
    jcenter()
}

dependencies {

    implementation 'javax.xml.bind:jaxb-api:2.3.1'
    implementation 'org.apache.commons:commons-lang3:3.11'
    implementation 'commons-cli:commons-cli:1.4'

    implementation 'org.apache.logging.log4j:log4j-core:2.14.0'
    implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.14.0'

    // TODO too much parsers included, reduce to several
    // TODO runtime vs compile?
    //runtimeOnly ('org.apache.tika:tika-parsers:1.25') {
    implementation ('org.apache.tika:tika-parsers:1.25') {

        exclude module: 'xml-apis'  // "The package org.xml.sax is accessible from more than one module: <unnamed>, java.xml"
// group: 'xml-apis',

        exclude module: 'vorbis-java-tika'
        exclude module: 'vorbis-java-core'
        exclude module: 'jmatio' // mathlab?
    }

    //testImplementation('org.junit.jupiter:junit-jupiter:5.6.0') // as junit doc says
    // as gradle doc says
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'

    spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.11.0'
    spotbugsPlugins 'com.mebigfatguy.sb-contrib:sb-contrib:7.4.7'
}

/*
sourceSets{
    pmd {
        java {
            srcDirs("src/main/java")
            exclude 'fb2/**'
            exclude 'fb2Generator/**'
        }
    }
}
*/

// tests has cyrillic and saved as unicode
//compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

import org.apache.tools.ant.filters.ReplaceTokens

mainClassName = 'org.svs.fb2conv.Fb2ConvertorApp'

if(!project.hasProperty('installerType')){
    project.ext.installerType = 'exe'
}

if(!project.hasProperty('reckon.scope')){
    project.ext.'reckon.scope' = 'patch'    // override default 'minor'
}

reckon {
    scopeFromProp()
    stageFromProp('dev', 'final')
}

processResources {
    exclude '**/version.properties'
}

task adjustEnvResources(type: Copy) {

    // jenkins build number
    // ? run 'clean' in jenkins build otherwise when resources up-to-date, will not be updated
    def val = System.getenv('BUILD_NUMBER')
    def bn = (val == null ? 'undefined' : val)
    //def bnn = (val == null ? '0' : val)

    val = System.getenv('USER');    // linux
    if(val == null){
        val = System.getenv('USERNAME');    // linux, windows
    }

    def builduser = (val == null ? 'undefined' : val)
    def buildhost = InetAddress.localHost.hostName

    from project.sourceSets.main.resources
    include 'version.properties'

    into project.sourceSets.main.output.resourcesDir

//    filter(ReplaceTokens, tokens: project.filterTokens)
    filter(ReplaceTokens,
        tokens:[
            'git.commit': grgit.head().abbreviatedId,
            'git.date': grgit.head().date.toString(),
            'git.branch': grgit.branch.current.name,
            'build.date': new java.util.Date().toString(),
            'build.host': builduser + '@' + buildhost,
            'version': project.version.toString(),
            'build.number': bn,
//            'environment.name': environmentName
            ])

    rename 'options-template.properties', 'options.properties'
}

compileJava.dependsOn adjustEnvResources


def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

dependencyUpdates {
    rejectVersionIf {
        isNonStable(it.candidate.version)
    }
}

test {
    useJUnitPlatform()
    // do not perform unit tests
    exclude 'org/svs/fb2conv/test/**'
}

// "the input line is too long"
// https://github.com/gradle/gradle/issues/1989
startScripts {
    doLast {
        windowsScript.text = windowsScript.text.replaceAll('set CLASSPATH=.*', 'set CLASSPATH=.;%APP_HOME%/lib/*')
    }
}

spotbugs {
    ignoreFailures = true
    onlyAnalyze = [ 'org.svs.fb2conv.*']
//    excludeFilter = file("$projectDir/config/findbugs/excludeFilter.xml")
}

pmd {
    //sourceSets = [sourceSets.pmd]
    ruleSets = []
    ruleSetFiles 'config/pmd/fb2conv.xml'
    ignoreFailures = true
    toolVersion = '6.30.0'
}

checkstyle {
    ignoreFailures = true
    toolVersion = '8.39'
}

// https://www.baeldung.com/gradle-source-sets
task printSourceSetInformation(){

    doLast{
        sourceSets.each { srcSet ->
            println "["+srcSet.name+"]"
            print "-->Source directories: "+srcSet.allJava.srcDirs+"\n"
            print "-->Output directories: "+srcSet.output.classesDirs.files+"\n"
            print "-->Compile classpath:\n"
            srcSet.compileClasspath.files.each {
                //print "  "+it.path+"\n"
            }
            println ""
        }
    }
}
